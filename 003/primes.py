from sys import argv

#object used to contain a prime number
class Prime(object):
    
    #constructor
    def __init__(self, step):
        self.step = step
        self.untilNextStep = step + 2
        
    #tostring
    def __str__(self):
        return str(self.step)
        
    #used to generate the next piece of the prime's generating function
    def generate(self, iterations=1):
        self.untilNextStep -= iterations

        if self.untilNextStep <= 0:
            self.untilNextStep += self.step
            
    #check the value at the current part of the prime's generating function
    def checkPrimality(self):
        if self.untilNextStep == self.step:
            return False
        else:
            return True

#generates a list of primes of size "length"
def genPrimes( length ):
    #initialize arrays for both the primes up to sqrtn and after sqrtn
    activePrimes = []
    inactivePrimes = []
    #populate arrays to avoid indexing errors during the main loop
    activePrimes.append(Prime(3))
    inactivePrimes.append(Prime(5))
    #output the first three primes to the console, otherwise output starts at 7
    print (2)
    print (3)
    print (5)

    #Set the step of prime(3) manually, before starting the loop.
    #Currently it is set to act as if the next number being checked is 4
    activePrimes[0].untilNextStep = 1
    #this loop skips all even numbers
    #removing the need to check against 2
    n=7
    #running tally of the length
    runningLength = 3
    #skip size between primality checks on n
    iterationSize = 2
    while runningLength != length:
        #give an initial optimistic value for the primality of the number we are looping at
        isPrime = True

        #check the value of the first prime in inactive primes
        #determine if it needs to be added to active primes
        #is it the square root of n?
        if inactivePrimes[0].step**2 == n:
            activePrimes.append( inactivePrimes.pop(0) )

        #debughead(n)

        #check the truth values generated by all the prime generating functions
        #run logical and across the whole set
        #if the result is true, the number is infact prime
        for prime in activePrimes:
            prime.generate(iterationSize)
            isPrime = isPrime and prime.checkPrimality()
            #debugbody(isPrime)

        #debugtail()

        #if the result of the logical and was "True" the number being queried was prime
        if isPrime:
            #add the value to our list of primes
            inactivePrimes.append( Prime(n) )
            #make sure to output the newly found prime to the console
            print(n)
            runningLength+=1

        n += iterationSize


#set of debugging functions used to visualize what is happening with the generating functions
#at the current value of n

#prints the first number and the truth values for 1 and 2
def debughead(n):
    print (str(n))
    print ("11", end="")

def debugbody(isPrime):
    if isPrime:
        print("1", end="")
    else:
        print("0", end="")

def debugtail():
    print("")


#execution of the script starts here!
script, length = argv

length = int(length)

genPrimes(length)
